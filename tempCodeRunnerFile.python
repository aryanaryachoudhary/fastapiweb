from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import APIKeyHeader


app = FastAPI()


@app.post("/register")
def register(username: str, email: str, api_key: APIKeyHeader):
    """Registers a user and creates the user in the database."""

    # Check if the user already exists.
    if User.query.filter_by(username=username).first() is not None:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="User already exists.",
        )

    # Create the user.
    user = User(username=username, email=email, api_key=api_key)
    user.save()

    return user


@app.post("/user/authenticate")
def authenticate(api_key: str):
    """Authenticates the user on login."""

    # Check if the API key is valid.
    user = User.query.filter_by(api_key=api_key).first()
    if user is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid API key.",
        )

    # Check if the API key has expired.
    if user.expiry_date < datetime.now():
        raise HTTPException(
            status_code=status.HTTP_402_PAYMENT_REQUIRED,
            detail="API key has expired.",
        )

    return user


@app.get("/getUserData")
def get_user_data(user: User = Depends(authenticate)):
    """Returns the user's name and email address."""

    return {
        "name": user.username,
        "email": user.email,
    }


if __name__ == "__main__":
    app.run()